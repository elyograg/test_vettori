#!/usr/bin/env bash

#-- set SCRIPT_DEBUG to get debug messages.
REQUIRED_PROGS=(which date dirname basename mktemp)
MINIMUM_JAVA_MAJOR_VERSION="11"
JAR_WILDCARD="test_vettori*.jar"
# test_vettori: The heap size may need adjustment.
LOCAL_HEAP="256m"
GC_TUNE=("-XX:+UnlockExperimentalVMOptions" "-XX:+UseZGC")

# To work around strange behavior in Git Bash.
MSYS_NO_PATHCONV=1
export MSYS_NO_PATHCONV

function get_timestamp() {
  date "+%4Y-%m-%d_%H:%M:%S.%3N"
}

function log_debug() {
  if [ -n "${SCRIPT_DEBUG}" ]; then
    echo -e "$(get_timestamp) DEBUG $*"
  fi
}

function log_info() {
  echo -e "$(get_timestamp) INFO  $*"
}

function log_warn() {
  echo -e "$(get_timestamp) WARN  $*"
}

function log_err() {
  echo -e "$(get_timestamp) ERROR $*" >> /dev/stderr
}

function cleanup_and_exit() {
  local EXITCODE var
  EXITCODE="$1"
  shift

  if [ -z "${EXITCODE}" ]; then
    EXITCODE="0"
  fi

  for var in "${TMP_VARS[@]}"
  do
    rm -f "${!var}"
  done

  if [ "${EXITCODE}" -ne 0 ] && [ "${EXITCODE}" -ne 2 ]; then
    log_err "Exit code is ${EXITCODE}.  Something went wrong."
  fi
  exit "${EXITCODE}"
}

function assign_temp_file() {
  local TMPFILENAME VARNAME
  VARNAME="$1"
  shift
  TMPFILENAME="$(mktemp)"
  rm -f "${TMPFILENAME}"
  eval "${VARNAME}"="$TMPFILENAME"
  TMP_VARS+=("${VARNAME}")
  # debugging
  #log_warn "${VARNAME}=\"${TMPFILENAME}\""
}

function print_java_paths_stderr() {
  if [ -n "${SOLR_JAVA_HOME}" ]; then
    log_err "JAVA_HOME initialized from SOLR_JAVA_HOME"
    log_err "SOLR_JAVA_HOME=\"${SOLR_JAVA_HOME}\""
  elif [ -n "${JAVA_HOME_DERIVED}" ]; then
    log_err "JAVA_HOME was derived from java on the path"
  elif [ -n "${JAVA_HOME_EXPLICIT}" ]; then
    log_err "JAVA_HOME was already defined"
  else
    log_err "Don't have info about where JAVA_HOME came from."
  fi
  log_err "JAVA_HOME=\"${JAVA_HOME}\""
  log_err "JAVA_BIN=\"${JAVA_BIN}\""
}

function die() {
  MSG="$1"
  shift
  RET="$1"
  shift
  if [ -z "${RET}" ]; then
    RET=0
  fi
  print_java_paths_stderr
  log_err "${MSG}"
  cleanup_and_exit "${RET}"
}

function find_java_home() {
  local JAVA_PATH JAVA_REALPATH JAVA_DIR TMP_PATH
  if [ -n "${JAVA_HOME}" ]; then
    JAVA_HOME_EXPLICIT="true"
    return
  fi
  if [ -n "${SOLR_JAVA_HOME}" ]; then
    JAVA_HOME="${SOLR_JAVA_HOME}"
  fi
  if [ -z "${JAVA_HOME}" ]; then
    JAVA_PATH="$(which java)"
    RET="$?"
    if [ "$RET" -eq 0 ]; then
      JAVA_REALPATH="$(realpath "${JAVA_PATH}")"
      JAVA_DIR="$(dirname "${JAVA_REALPATH}")"
      JAVA_HOME="$(cd "${JAVA_DIR}" || exit ; pwd -P)"
      BASENAME_HOME="$(basename "${JAVA_HOME}")"
      if [ "${BASENAME_HOME}" == "bin" ]; then
        TMP_PATH="$(dirname "${JAVA_HOME}")"
	JAVA_HOME="${TMP_PATH}"
      fi
      JAVA_HOME_DERIVED="true"
    fi
  fi

  JAVA_BIN="${JAVA_HOME}/bin/java"
  if [ ! -x "${JAVA_BIN}" ]; then
    JAVA_BIN="${JAVA_HOME}/java"
    if [ ! -x "${JAVA_BIN}" ]; then
      die "No executable found at ${JAVA_BIN}"
    fi
  fi

  if [ -n "${SOLR_JAVA_HOME}" ]; then
    log_debug "JAVA_HOME initialized from SOLR_JAVA_HOME"
    log_debug "SOLR_JAVA_HOME=\"${SOLR_JAVA_HOME}\""
  elif [ -n "${JAVA_HOME_DERIVED}" ]; then
    log_debug "JAVA_HOME was derived from java on the path"
  elif [ -n "${JAVA_HOME_EXPLICIT}" ]; then
    log_debug "JAVA_HOME was already defined"
  else
    log_debug "Don't have info about where JAVA_HOME came from."
  fi
  log_debug "JAVA_HOME=\"${JAVA_HOME}\""
  log_debug "JAVA_BIN=\"${JAVA_BIN}\""

  # This does not actually check the Java version.  It just makes sure Java can run.
  "${JAVA_BIN}" -Xmx4m -XX:+CrashOnOutOfMemoryError -version > /dev/null 2>&1
  RET="$?"
  if [ "$RET" -ne 0 ]; then
    die "Running ${JAVA_BIN} with basic options failed."
  fi
}

function check_required_progs() {
  local PROG PROG_MISSING
  for PROG in "${REQUIRED_PROGS[@]}"
  do
    if [ ! -x "$(which "${PROG}")" ]; then
      log_err "Required program ${PROG} not in PATH!"
      PROG_MISSING="true"
      break
    fi
  done
  if [ -n "${PROG_MISSING}" ]; then
    die "Aborting."
  fi

}

#======================
# Begin execution
#======================

log_debug "Starting."
TMP_VARS=()
SCRIPT_DIR="$(cd "$(dirname "$0")" || die "Error on cd to define SCRIPT_DIR" ; pwd -P)"
cd "${SCRIPT_DIR}" || die "Can't cd to script directory ${SCRIPT_DIR}"

# shellcheck disable=SC2086
if [ -r build/libs/${JAR_WILDCARD} ]; then
# shellcheck disable=SC2086
  JAR_FILE="$(echo build/libs/${JAR_WILDCARD} | tail -n1)"
elif [ -r ${JAR_WILDCARD} ]; then
# shellcheck disable=SC2086
  JAR_FILE="$(echo ${JAR_WILDCARD} | tail -n1)"
else
  die "Unable to find jar!"
fi

log_debug "Finding JAVE_HOME."
find_java_home
log_debug "Checking required programs."
check_required_progs
log_debug "Getting a temp file path."
assign_temp_file "TMPFILE1"

# Run the application with no options.
# The export of CUSTOM_OUTPUT is to quiet shellcheck.
log_debug "Running without options just to make sure it will start."
CUSTOM_OUTPUT="$("${JAVA_BIN}" "-Xmx${LOCAL_HEAP}" -jar "${JAR_FILE}" 2> "${TMPFILE1}")"
RET="$?"
export CUSTOM_OUTPUT
UNSUPPORTED="$(grep -c "UnsupportedClassVersionError" "${TMPFILE1}")"
if [ "${RET}" -ne 0 ] && [ "${RET}" -ne 2 ]; then
  {
    echo "--- command output:"
    cat "${TMPFILE1}"
    echo "---"
  } >> /dev/stderr
  if [ "${UNSUPPORTED}" -gt 0 ]; then
    log_err "Java not new enough.  Minimum major java version is ${MINIMUM_JAVA_MAJOR_VERSION}."
  fi
  echo "DEBUG: ${RET}"
  die "Aborting due to error on trial run of program." "${RET}"
fi

# Run the application for real with all the options given to this script.
log_info "Passing control to java."
log_info "JAR_FILE=${JAR_FILE}"
log_info "JAVA_BIN=${JAVA_BIN}"
log_info "Options given: $*"
"${JAVA_BIN}" "${GC_TUNE[@]}" "-Xmx${LOCAL_HEAP}" -jar "${JAR_FILE}" "$@"
RET="$?"

cleanup_and_exit "${RET}"
